to <- as.character(data$CUSTOMER_CODE_TO[i])
distance <- data$DISTANCE_KM[i]
# Convert customer codes to matrix indices and assign distance
if (!is.na(distance)) {  # Check if distance is not NA
distance_matrix[from, to] <- distance
}
}
# Set diagonal elements to 0 since the distance from any location to itself is zero
diag(distance_matrix) <- 0
return(distance_matrix)
}
tourLength <- function(tour, distMatrix) {
tour <- c(tour, tour[1])             #e.g. convert A,B,C to A,B,C,A. Thus the tour finishes where it started.
route <- embed(tour, 2)[,2:1]        #converts the tour into a matrix of trips. i.e.
#
tourlength <- sum(distMatrix[route]) #tour length must be minimised
return(tourlength)                   #however, GA package only maximises. So 1/tourlength can be maximised.
}
# tspFitness function designed to work with genetic algorithms for TSP problems
# It computes the fitness of a tour, where higher fitness values are better
tspFitness <- function(tour, distMatrix){
# Calculate the length of the tour using the tourLength function
tour_length <- tourLength(tour, distMatrix)
# Since the goal is to minimize tour length, but the GA maximizes fitness,
# we return the reciprocal of the tour length to convert this into a maximization problem.
# We also handle the edge case where tour_length might be zero to avoid division by zero.
if (tour_length > 0) {
return(1 / tour_length)
} else {
return(0)  # If the tour length is zero, return zero fitness
}
}
#To call this function, you must pass it on a GA produced solution.
#For example:
#results <- runGA(problem = "tsp")
#solution <- getBestSolution()
# plotTSPSolution(solution)
plotTSPSolution<-function(solution){
data("eurodist", package = "datasets")
mds <- cmdscale(eurodist)
x <- mds[, 1]
y <- -mds[, 2]
plot(x, y, type = "n", asp = 1, xlab = "", ylab = "")
abline(h = pretty(range(x), 10), v = pretty(range(y), 10),
col = "light gray")
tour <- solution[1, ]
tour <- c(tour, tour[1])
n <- length(tour)
arrows(x[tour[-n]], y[tour[-n]], x[tour[-1]], y[tour[-1]],
length = 0.15, angle = 25, col = "steelblue", lwd = 2)
text(x, y, labels(eurodist), cex=0.8)
}
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
# Load necessary libraries
library(readxl)
library(writexl)
# Load the data from the Excel file
file_path <- "E:/amazon_last_mile_delivery_optimization/dataset/main_data.csv"
data <- read.csv(file_path)
head(data)
# Remove rows with any null values
data_clean <- na.omit(data)
# Select only the first 3,000 records if there are at least that many
if (nrow(data_clean) > 3000) {
data_clean <- data_clean[1:3000, ]
}
# Specify the new file path for the cleaned data
new_file_path <- "E:/amazon_last_mile_delivery_optimization/dataset/main_processed_data.csv"
# Save the processed data to a new Excel file
write.csv(data_clean, new_file_path)
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
# Load the necessary library
library(dplyr)
# Set the file path
file_path <- "E:/amazon_last_mile_delivery_optimization/dataset/main_data.csv"
# Read the data from the CSV file
data <- read.csv(file_path)
# Process the data by removing columns, filtering out null values, and selecting the first 500 rows
processed_data <- data %>%
select(-ROUTE_ID, -TIME_DISTANCE_MIN) %>%  # Remove unwanted columns
na.omit() %>%                              # Remove rows with any null values
slice(1:500)                               # Select the first 500 rows
# Save the processed data to a new CSV file
write.csv(processed_data, "E:/amazon_last_mile_delivery_optimization/dataset/processed_data.csv", row.names = FALSE)
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
#  data("eurodist", package = "datasets")
data <- read.csv("E:/amazon_last_mile_delivery_optimization/dataset/newdistance_dataset.csv")
D <- as.matrix(data) #eurodist
D
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
plotbars(results1, results2, results3,
cap1 = "GA1", cap2 = "GA2", cap3 = "GA3")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
parsemydata1 <- parseData(results1,2,4)
parsemydata2 <- parseData(results2,2,4)
parsemydata3 <- parseData(results3,2,4)
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
mytsp1 <- runGA(problem = "tsp")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
mytsp2 <- runGA(problem = "tsp")
mytsp3 <- runGA(problem = "tsp")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
mytsp3 <- runGA(problem = "tsp")
parsemydata1 <- parseData(mytsp1,2,4)
parsemydata2 <- parseData(mytsp2,2,4)
parsemydata3 <- parseData(mytsp3,2,4)
plotbars(parsemydata1,parsemydata2,parsemydata3,"crossover=0.2","crossover=0.3","crossover=0.4")
plotbars(results1,results2,results3,"crossover=0.2","crossover=0.3","crossover=0.4")
plotbars(parsemydata1,parsemydata2,parsemydata3,"crossover=0.2","crossover=0.3","crossover=0.4")
source("E:/amazon_last_mile_delivery_optimization/TSPNEW.R")
source("E:/amazon_last_mile_delivery_optimization/pso.R")
source("E:/amazon_last_mile_delivery_optimization/TSPNEW.R")
source("E:/amazon_last_mile_delivery_optimization/pso.R")
install.packages("pso")
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
results1 <- runGA(noRuns = 30, problem = "tsp" )
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
results1 <- runGA(noRuns = 30, problem = "tsp" )
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
results2 <- runGA(noRuns = 30, problem = "tsp" )
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
results3 <- runGA(noRuns = 30, problem = "tsp",  popSize = 50)
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
parsemydata1 <- parseData(results1,2,4)
parsemydata2 <- parseData(results2,2,4)
parsemydata3 <- parseData(results3,2,4)
source("E:/amazon_last_mile_delivery_optimization/plot.R")
plotbars(parsemydata1,parsemydata2,parsemydata3,"crossover=0.2","crossover=0.3","crossover=0.4")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrp.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrp.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrp.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrp.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
runGA(noRuns = 30, problem = "TSP")
library(GA)
source("vrp.R") # Make sure VRP.R is in the same directory as runGA.R
# Monitor function for Genetic Algorithm progress
monitor <- function(obj) {
iter <- obj@iter
if (iter <= maxGenerations) {
fitness <- obj@fitness
thisRunResults[iter, 1] <<- max(fitness)
thisRunResults[iter, 2] <<- mean(fitness)
thisRunResults[iter, 3] <<- median(fitness)
cat(paste("\rGA | generation =", iter, "Mean =", thisRunResults[iter, 2], "| Best =", thisRunResults[iter, 1], "\n"))
flush.console()
} else {
cat("ERROR: iter = ", iter, " exceeds maxGenerations = ", maxGenerations, ".\n")
}
}
# Function to run the GA for VRP
runGA_VRP <- function(noRuns = 30, popSize = 50, maxGenerations = 100) {
# Setting up the data for the VRP problem
data <- getData()
distMatrix <- data$distMatrix
demands <- data$demands
# Define the variables for the GA
pcrossover = 0.8
pmutation = 0.1
minIndex = 1 # Minimum index of the route
maxIndex = nrow(distMatrix) # Maximum index based on the number of locations
statnames = c("best", "mean", "median")
resultsMatrix = matrix(0, nrow = maxGenerations, ncol = noRuns * length(statnames))
colnames(resultsMatrix) <- rep(statnames, noRuns)
bestFitness <- -Inf
bestSolution <- NULL
for (run in 1:noRuns) {
cat(paste("Starting Run ", run, "\n"))
GA <- ga(type = "permutation", fitness = function(tour) vrpFitness(tour, distMatrix = distMatrix, demands = demands),
min = minIndex, max = maxIndex, popSize = popSize, maxiter = maxGenerations,
pcrossover = pcrossover, pmutation = pmutation, monitor = monitor, seed = run)
# Save the run results
resultsMatrix[, (run-1)*length(statnames) + 1] <- 1:maxGenerations
for (j in 1:length(statnames)) {
resultsMatrix[, (run-1)*length(statnames) + j + 1] <- GA@summary[[statnames[j]]]
}
# Update best solution and fitness
if (GA@fitnessValue > bestFitness) {
bestFitness <- GA@fitnessValue
bestSolution <- GA@solution
}
}
# Return the results
return (list(bestFitness = bestFitness, bestSolution = bestSolution, resultsMatrix = resultsMatrix))
}
# Retrieve the best fitness and solution
getBestFitness <- function() {
bestFitness
}
getBestSolution <- function() {
bestSolution
}
# Example call to run the GA
results <- runGA_VRP()
source("E:/amazon_last_mile_delivery_optimization/vrp.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrp.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrp.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
View(results1)
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/vrpParse.R")
source("E:/amazon_last_mile_delivery_optimization/vrpParse.R")
View(results1)
View(results1)
source("E:/amazon_last_mile_delivery_optimization/vrpParse.R")
source("E:/amazon_last_mile_delivery_optimization/vrpParse.R")
source("E:/amazon_last_mile_delivery_optimization/vrpParse.R")
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
runGA(noRuns = 30, problem = "feature", popSize = 15)
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
runGA(noRuns = 30, problem = "feature", popSize = 15)
source("E:/amazon_last_mile_delivery_optimization/TSPNEW.R")
source("E:/amazon_last_mile_delivery_optimization/TSPNEW.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
runGA(noRuns = 30, problem = "feature", popSize = 15)
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP 3.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/vrp.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpParse.R")
source("E:/amazon_last_mile_delivery_optimization/vrpGA.R")
source("E:/amazon_last_mile_delivery_optimization/vrpParse.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
plot_line_gg <- function(data1, data2, data3, cap1 = "GA1", cap2 = "GA2", cap3 = "GA3") {
# Combine the data into a single data frame with an identifier column
data1$Config <- cap1
data2$Config <- cap2
data3$Config <- cap3
full_data <- rbind(data1, data2, data3)
ggplot(full_data, aes(x = X1, y = X2, group = Config, color = Config)) +
geom_line() +
geom_errorbar(aes(ymin = X2 - X3, ymax = X2 + X3), width = 0.1) +
labs(title = "GA Fitness Over Generations", x = "Generation", y = "Fitness") +
theme_minimal()
}
# Assuming parsemydata1, parsemydata2, parsemydata3 are data frames with appropriate columns
plot_line_gg(parsemydata1, parsemydata2, parsemydata3, "crossover=0.2", "crossover=0.3", "crossover=0.4")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
# Assuming results1, results2, results3 are vectors of fitness values
anova_results <- aov(fitness ~ GA, data = data.frame(fitness = c(results1, results2, results3),
GA = factor(rep(c("GA1", "GA2", "GA3"), each = length(results1)))))
summary(anova_results)
# Fit a linear model
fit <- lm(fitness ~ popSize * mutationRate, data=myData)
summary(fit)
plot(runTime ~ popSize, data = myTimeData, main = "Time Complexity Analysis", xlab = "Population Size", ylab = "Run Time")
plot(runTime ~ popSize, data = myTimeData, main = "Time Complexity Analysis", xlab = "Population Size", ylab = "Run Time")
plot(runTime ~ popSize, data = myTimeData, main = "Time Complexity Analysis", xlab = "Population Size", ylab = "Run Time")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
# Assuming results1, results2, results3 are vectors of fitness values
anova_results <- aov(fitness ~ GA, data = data.frame(fitness = c(results1, results2, results3),
GA = factor(rep(c("GA1", "GA2", "GA3"), each = length(results1)))))
summary(anova_results)
plot_convergence <- function(data) {
plot(data[,1], data[,2], type = 'l', xlab = "Generation", ylab = "Best Fitness", main = "Convergence Plot")
}
# Assuming parsemydata1 is structured with generations as rows and fitness values in the second column
plot_convergence(parsemydata1)
plot_convergence <- function(data) {
plot(data[,1], data[,2], type = 'l', xlab = "Generation", ylab = "Best Fitness", main = "Convergence Plot")
}
# Assuming parsemydata1 is structured with generations as rows and fitness values in the second column
plot_convergence(parsemydata2)
plot_convergence <- function(data) {
plot(data[,1], data[,2], type = 'l', xlab = "Generation", ylab = "Best Fitness", main = "Convergence Plot")
}
# Assuming parsemydata1 is structured with generations as rows and fitness values in the second column
plot_convergence(parsemydata3)
calculate_diversity <- function(data) {
# Assuming data has individual solutions as rows and gene values as columns
apply(data, 2, function(x) -sum(prop.table(table(x)) * log(prop.table(table(x)))))
}
# Sample call
diversity_scores <- calculate_diversity(parsemydata1)
plot(diversity_scores, type = 'l', xlab = "Generation", ylab = "Diversity Score", main = "Population Diversity Over Generations")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
# Assuming results1, results2, results3 are vectors of fitness values
anova_results <- aov(fitness ~ GA, data = data.frame(fitness = c(results1, results2, results3),
GA = factor(rep(c("GA1", "GA2", "GA3"), each = length(results1)))))
summary(anova_results)
source("E:/amazon_last_mile_delivery_optimization/TSP.R")
source("E:/amazon_last_mile_delivery_optimization/runGA.R")
source("E:/amazon_last_mile_delivery_optimization/parseData.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/multiple_plot.R")
source("E:/amazon_last_mile_delivery_optimization/plot.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
source("E:/amazon_last_mile_delivery_optimization/accuracy_check.R")
# Assuming results1, results2, results3 are vectors of fitness values
anova_results <- aov(fitness ~ GA, data = data.frame(fitness = c(results1, results2, results3),
GA = factor(rep(c("GA1", "GA2", "GA3"), each = length(results1)))))
summary(anova_results)
# Function to create an accuracy table for the GA runs
create_accuracy_table <- function(data1, data2, data3) {
# Calculate metrics for each dataset
metrics <- function(data) {
c(
Best = min(data[,2]), # Assuming column 2 is the fitness value
Mean = mean(data[,2]),
SD = sd(data[,2])
)
}
# Apply the metrics function to each GA dataset
results1 <- metrics(data1)
results2 <- metrics(data2)
results3 <- metrics(data3)
# Combine the results into a data frame
accuracy_table <- data.frame(
GA1 = results1,
GA2 = results2,
GA3 = results3
)
# Transpose the data frame to get the desired format
accuracy_table <- t(accuracy_table)
colnames(accuracy_table) <- c("Best Fitness", "Mean Fitness", "Standard Deviation")
# Print the table
print(accuracy_table)
}
# Assuming parsemydata1, parsemydata2, parsemydata3 are the final generation data for each GA
create_accuracy_table(parsemydata1, parsemydata2, parsemydata3)
extract_fitness_at_generations <- function(data1, data2, data3, generations) {
fitness_values <- sapply(generations, function(gen) {
c(
data1[gen, 2], # Assuming the second column is the fitness value
data2[gen, 2],
data3[gen, 2]
)
})
# Convert to data frame
fitness_df <- as.data.frame(t(fitness_values))
colnames(fitness_df) <- c("GA1 Fitness", "GA2 Fitness", "GA3 Fitness")
rownames(fitness_df) <- paste(generations)
return(fitness_df)
}
# Sample generations where you want to extract fitness values
generations <- c(5, 10, 15, 20, 25, 30)
# Assuming parsemydata1, parsemydata2, parsemydata3 are data frames containing the GA results with rows indexed by generations
fitness_table <- extract_fitness_at_generations(parsemydata1, parsemydata2, parsemydata3, generations)
# Print the table
print(fitness_table)
# Assuming results1, results2, results3 are vectors of fitness values
anova_results <- aov(fitness ~ GA, data = data.frame(fitness = c(results1, results2, results3),
GA = factor(rep(c("GA1", "GA2", "GA3"), each = length(results1)))))
summary(anova_results)
